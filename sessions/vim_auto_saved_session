let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <S-Tab> =BackwardsSnippet()
imap <F5> :ei
imap <C-Del> _mzew<BS>i<Del>v`z"_c
imap <C-BS> 
imap <C-S-PageUp> _mz"_xv`z<BS>o<Home>
imap <C-S-PageDown> _mz"_xv`zo<End><End>
imap <C-S-End> _mz"_xv`zo<End>
imap <C-S-Home> _mz"_s<Left>`zv<Home>
imap <C-S-Up> _mz"_xv`z<Up>o`z<BS>o
imap <C-S-Down> _mz"_xv`zo`z<Down><Right><BS><BS>
imap <C-S-Right> _my"_xi<S-Right><BS>_mz"_xv`yo`z
imap <C-S-Left> _mz"_xv`z<BS>obge 
imap <C-F12>  :silent call UpdateTags() ,svi
imap <C-F11> :call UpdateAllTags(),svi
noremap! <silent> <F6> :SyntasticCheck
imap <F7>  set makeprg=make\ -C\ ./build :make --no-print-directory  :TagbarClose :cw  :TagbarOpen i
imap <F8>   :call BuildAndInstallCppApp()i
inoremap <F1> 
nmap  :A 
nmap  ggvG <End>
vmap  ggvG <End>
nmap  gg
nmap v :call Screen_Vars()
nmap  vip
vmap  "ry :call Send_to_Screen(@r)
vmap  "+yi
nmap  G
nmap  :execute "/" .  expand('<cword>') 
nmap  /
nmap  :execute "call MyReplaceSelectedText(\"".expand('<cword>')."\")" 
noremap  h
snoremap <silent> 	 i<Right>=TriggerSnippet()
xnoremap 	 %
nmap 	 :bn
noremap <NL> j
noremap  k
noremap  l
nmap  :split 
noremap  :NERDTreeToggle
nmap  :xa!
nmap  [{%v%<Home>
nmap 	 [{=%
nmap  :update
nmap  :call PasteAndIndent()<End>
nmap  :BD
nmap  :q! 
snoremap  b<BS>
xmap  "+d
nmap  
nmap  u
snoremap % b<BS>%
snoremap ' b<BS>'
map ,mq <Plug>MBEMarkCurrent
map ,mbt <Plug>TMiniBufExplorer
map ,mbu <Plug>UMiniBufExplorer
map ,mbc <Plug>CMiniBufExplorer
map ,mbe <Plug>MiniBufExplorer
nmap ,ihn :IHN
nmap ,is :IHS:A
nmap ,ih :IHS
map <silent> ,mm :ShowMarksPlaceMark
map <silent> ,ma :ShowMarksClearAll
map <silent> ,mh :ShowMarksClearMark
map <silent> ,mo :ShowMarksOn
map <silent> ,mt :ShowMarksToggle
nnoremap ,gb :GitBlame
nnoremap ,gp :GitPullRebase
nnoremap ,gc :GitCommit
nnoremap ,gA :GitAdd <cfile>
nnoremap ,ga :GitAdd
nnoremap ,gl :GitLog
nnoremap ,gs :GitStatus
nnoremap ,gD :GitDiff --cached
nnoremap ,gd :GitDiff
nmap <silent> ,ba <Plug>BufKillAlt
nmap <silent> ,bundo <Plug>BufKillUndo
nmap <silent> ,!bw <Plug>BufKillBangBw
nmap <silent> ,bw <Plug>BufKillBw
nmap <silent> ,!bd <Plug>BufKillBangBd
nmap <silent> ,bd <Plug>BufKillBd
nmap <silent> ,!bun <Plug>BufKillBangBun
nmap <silent> ,bun <Plug>BufKillBun
nmap <silent> ,bf <Plug>BufKillForward
nmap <silent> ,bb <Plug>BufKillBack
nmap ,a <Plug>ToggleAutoCloseMappings
nmap ,ca <Plug>NERDCommenterAltDelims
xmap ,cu <Plug>NERDCommenterUncomment
nmap ,cu <Plug>NERDCommenterUncomment
xmap ,cb <Plug>NERDCommenterAlignBoth
nmap ,cb <Plug>NERDCommenterAlignBoth
xmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cA <Plug>NERDCommenterAppend
xmap ,cy <Plug>NERDCommenterYank
nmap ,cy <Plug>NERDCommenterYank
xmap ,cs <Plug>NERDCommenterSexy
nmap ,cs <Plug>NERDCommenterSexy
xmap ,ci <Plug>NERDCommenterInvert
nmap ,ci <Plug>NERDCommenterInvert
nmap ,c$ <Plug>NERDCommenterToEOL
xmap ,cn <Plug>NERDCommenterNested
nmap ,cn <Plug>NERDCommenterNested
xmap ,cm <Plug>NERDCommenterMinimal
nmap ,cm <Plug>NERDCommenterMinimal
xmap ,c  <Plug>NERDCommenterToggle
nmap ,c  <Plug>NERDCommenterToggle
xmap ,cc <Plug>NERDCommenterComment
nmap ,cc <Plug>NERDCommenterComment
map ,hof :%!xxd -r
map ,hon :%!xxd
snoremap <silent> ,cu :silent s/^\V=escape(b:comment_leader,'\/')//e:nohlsearch'"'"
onoremap <silent> ,cu :silent s/^\V=escape(b:comment_leader,'\/')//e:nohlsearch'"'"
snoremap <silent> ,cc :silent s/^/=escape(b:comment_leader,'\/')/:nohlsearch
onoremap <silent> ,cc :silent s/^/=escape(b:comment_leader,'\/')/:nohlsearch
map ,sd :SessionOpen vim_auto_saved_session:NERDTree . 
map ,so :SessionOpen user_auto_saved_session
map ,ss :SessionSaveAs user_auto_saved_session:NERDTree .
nnoremap ,r :NERDTreeFind
nnoremap ,n :NERDTree .
nmap <silent> ,sv :w :so $MYVIMRC
nmap <silent> ,ov :e $MYVIMRC
nmap ,l :TagbarToggle
nnoremap ,ev :e $MYVIMRC
nnoremap ,v V`]
nnoremap ,q gqip
nnoremap ,ft vatzf
nnoremap ,W :%s/\s\+$//:let @/=''
nnoremap ,  :noh
nmap <silent> ,/ :nohlsearch
vnoremap / /\v
nnoremap / /\v
nnoremap ; :
imap Â‘ :qa!
xmap S <Plug>VSurround
snoremap U b<BS>U
snoremap \ b<BS>\
snoremap ^ b<BS>^
snoremap ` b<BS>`
nmap cs <Plug>Csurround
nmap c0 "0yy
vmap c0 "0yyi
nmap c9 "9yy
vmap c9 "9yyi
nmap c8 "8yy
vmap c8 "8yyi
nmap c7 "7yy
vmap c7 "7yyi
nmap c6 "6yy
vmap c6 "6yyi
nmap c5 "5yy
vmap c5 "5yyi
nmap c4 "4yy
vmap c4 "4yyi
nmap c3 "3yy
vmap c3 "3yyi
nmap c2 "2yy
vmap c2 "2yyi
nmap c1 "1yy
vmap c1 "1yyi
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap gS <Plug>VgSurround
nnoremap g; g;zz
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
noremap <C-Right> l
noremap <C-Left> h
noremap <C-Up> k
noremap <C-Down> j
nnoremap <silent> <Plug>SurroundRepeat .
nnoremap <silent> <F11> :call conque_term#exec_file()
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
nmap <F5> :e
vmap <Del> di
vmap <C-S-PageUp> <Home>
vmap <C-S-PageDown> <End><End>
nmap <C-S-PageUp> v<Home>
nmap <C-S-PageDown> v<End><End>
nmap <C-S-End> v<End>
nmap <C-S-Home> v<Home>
vmap <C-S-Up> <Up>
vmap <C-S-Down> <Down>
nmap <C-S-Up> v<Up>
nmap <C-S-Down> v<Down>
vmap <C-S-Right> ew<BS>
vmap <C-S-Left> bge 
nmap <C-S-Right> vew<BS>
nmap <C-S-Left> vbge 
nmap <C-F12> :silent call UpdateTags(),sv
nmap <C-F11> :call UpdateAllTags(),sv
noremap <silent> <F6> :SyntasticCheck
nmap <S-Tab> :bp 
nmap <F7> :set makeprg=make\ -C\ . :make --no-print-directory  :TagbarClose :cw  :TagbarOpen 
nmap <F8>  :call BuildAndInstallCppApp()
nmap <M-Left> :cprevious
nmap <M-Right> :cnext
map <F3><F3> :execute "call MySearchSelectedText (\"".expand("<cword>") . "\")" | cw
map <F3> :call MySearchText() | cw
vnoremap <F1> 
nnoremap <F1> 
imap  :Ai
imap  ggvG <End>
imap  ggi
imap  Gi
imap  :execute "/" .  expand('<cword>') i
imap  /
imap S <Plug>ISurround
imap s <Plug>Isurround
imap  :execute "call MyReplaceSelectedText(\"".expand('<cword>')."\")" i
inoremap <silent> 	 =TriggerSnippet()
imap   :split i
inoremap  :NERDTreeTogglei
imap  :xa!
inoremap <silent> 	 =ShowAvailableSnips()
imap  [{%v%<Home>
imap 	 [{=%i
imap  :updatei
imap  :call PasteAndIndent() i<End>
imap  :BD>i
imap  :q! i
imap  i
imap  ui
inoremap <silent> OC <Right>
imap ,ihn :IHN
imap ,is :IHS:A
imap ,ih :IHS
inoremap ,j :RopeGotoDefinition
nmap Â‘ :qa!
cmap w!! %!sudo tee > /dev/null % 
let &cpo=s:cpo_save
unlet s:cpo_save
set autochdir
set backspace=indent,eol,start
set backupskip=/tmp/*,/private/tmp/*
set clipboard=unnamedplus
set completeopt=menuone,menu,longest,preview
set dictionary=/usr/share/dict/words
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set formatoptions=qrn1
set gdefault
set helplang=en
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set listchars=tab:â–¸\ ,eol:Â¬
set matchtime=3
set modelines=0
set mouse=a
set omnifunc=syntaxcomplete#Complete
set pastetoggle=<F2>
set printoptions=paper:a4
set ruler
set runtimepath=~/.vim,~/.vim/bundle/a,~/.vim/bundle/minibufexpl,~/.vim/bundle/nerdtree,~/.vim/bundle/nerdtreeBackup,~/.vim/bundle/snipmate,~/.vim/bundle/surround,~/.vim/bundle/syntastic,~/.vim/bundle/tagbar,~/.vim/bundle/vim-cmake,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/bundle/snipmate/after,~/.vim/after
set scrolloff=3
set shiftwidth=4
set showcmd
set showmatch
set smartcase
set softtabstop=4
set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set noswapfile
set tabstop=4
set tags=./tags,./TAGS,tags,TAGS,~/.vim/tags/cpp,~/.vim/tags/usr_local_include,~/.vim/tags/last_project_tags
set textwidth=79
set title
set undolevels=10000
set updatetime=300
set visualbell
set wildignore=.hg,.git,.svn,*.aux,*.out,*.toc,*.jpg,*.bmp,*.gif,*.png,*.jpeg,*.o,*.obj,*.exe,*.dll,*.manifest,*.spl,*.sw?,*.DS_Store,*.luac,migrations,*.pyc,*.orig
set wildmenu
set wildmode=list:longest
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/.vim/autoload/mmtemplates
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +0 ~/.vim/autoload/mmtemplates/core.vim
silent! argdel *
edit ~/.vim/autoload/mmtemplates/core.vim
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 31 + 118) / 237)
exe 'vert 2resize ' . ((&columns * 164 + 118) / 237)
exe 'vert 3resize ' . ((&columns * 40 + 118) / 237)
argglobal
enew
file ~/.vim/autoload/mmtemplates/NERD_tree_1
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=hide
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'nerdtree'
setlocal filetype=nerdtree
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=qrn1
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'nerdtree'
setlocal syntax=nerdtree
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=79
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal winfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
wincmd w
argglobal
noremap <buffer> <silent> K :exe "Man" expand('<cword>') 
vnoremap <buffer> <silent> [" :exe "normal! gv"|call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
nnoremap <buffer> <silent> [" :call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
vnoremap <buffer> <silent> [] m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "bW")
nnoremap <buffer> <silent> [] m':call search('^\s*endf*\%[unction]\>', "bW")
vnoremap <buffer> <silent> [[ m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "bW")
nnoremap <buffer> <silent> [[ m':call search('^\s*fu\%[nction]\>', "bW")
vnoremap <buffer> <silent> ]" :exe "normal! gv"|call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
nnoremap <buffer> <silent> ]" :call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
vnoremap <buffer> <silent> ][ m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "W")
nnoremap <buffer> <silent> ][ m':call search('^\s*endf*\%[unction]\>', "W")
vnoremap <buffer> <silent> ]] m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "W")
nnoremap <buffer> <silent> ]] m':call search('^\s*fu\%[nction]\>', "W")
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:\"\ -,mO:\"\ \ ,eO:\"\",:\"
setlocal commentstring=\"%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'vim'
setlocal filetype=vim
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=n1croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetVimIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,=end,=else,=cat,=fina,=END,0\\
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:,#
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'vim'
setlocal syntax=vim
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=79
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 680 - ((3 * winheight(0) + 27) / 54)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
680
normal! 01l
wincmd w
argglobal
enew
file ~/.vim/autoload/mmtemplates/__Tagbar__
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=TagbarBalloonExpr()
setlocal nobinary
setlocal bufhidden=hide
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'tagbar'
setlocal filetype=tagbar
endif
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=qrn1
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!TagbarGenerateStatusline()
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'tagbar'
setlocal syntax=tagbar
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal winfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 31 + 118) / 237)
exe 'vert 2resize ' . ((&columns * 164 + 118) / 237)
exe 'vert 3resize ' . ((&columns * 40 + 118) / 237)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
